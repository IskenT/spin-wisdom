// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package tcp_transport is a generated GoMock package.
package tcp_transport

import (
	context "context"
	reflect "reflect"

	model "github.com/IskenT/spin-wisdom/internal/service/quotes/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPowService is a mock of PowService interface.
type MockPowService struct {
	ctrl     *gomock.Controller
	recorder *MockPowServiceMockRecorder
}

// MockPowServiceMockRecorder is the mock recorder for MockPowService.
type MockPowServiceMockRecorder struct {
	mock *MockPowService
}

// NewMockPowService creates a new mock instance.
func NewMockPowService(ctrl *gomock.Controller) *MockPowService {
	mock := &MockPowService{ctrl: ctrl}
	mock.recorder = &MockPowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPowService) EXPECT() *MockPowServiceMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockPowService) GenerateChallenge(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockPowServiceMockRecorder) GenerateChallenge(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockPowService)(nil).GenerateChallenge), ctx)
}

// ValidateChallenge mocks base method.
func (m *MockPowService) ValidateChallenge(ctx context.Context, difficulty int, challenge, response string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateChallenge", ctx, difficulty, challenge, response)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateChallenge indicates an expected call of ValidateChallenge.
func (mr *MockPowServiceMockRecorder) ValidateChallenge(ctx, difficulty, challenge, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChallenge", reflect.TypeOf((*MockPowService)(nil).ValidateChallenge), ctx, difficulty, challenge, response)
}

// MockQuoteService is a mock of QuoteService interface.
type MockQuoteService struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceMockRecorder
}

// MockQuoteServiceMockRecorder is the mock recorder for MockQuoteService.
type MockQuoteServiceMockRecorder struct {
	mock *MockQuoteService
}

// NewMockQuoteService creates a new mock instance.
func NewMockQuoteService(ctrl *gomock.Controller) *MockQuoteService {
	mock := &MockQuoteService{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteService) EXPECT() *MockQuoteServiceMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockQuoteService) GetRandomQuote(ctx context.Context) model.Quote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(model.Quote)
	return ret0
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoteServiceMockRecorder) GetRandomQuote(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoteService)(nil).GetRandomQuote), ctx)
}
